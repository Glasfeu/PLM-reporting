#+TITLE: Stage 2015 - Journal de bord
#+AUTHOR: Alexandre CARPENTIER
#+DATE: lundi 15 juin 2015

* Journal
** Week 15 Jun
*** Mon 15 Jun
**** DONE Modifier le code du Harvester pour l'intégrer au travail déjà effectué
     SCHEDULED: <2015-06-17 wed.>
**** DONE Retirer de la liste les clics rageurs sur Run quand du code ne fonctionne pas
     SCHEDULED: <2015-06-18 thu.>
**** DONE Vérifier le bon fonctionnement du Harvester et des nouvelles méthodes afin d'être sûr que l'on récupère bien les bonnes erreurs
     SCHEDULED: <2015-06-22 mon.>

- Premières modifications du code des classes réalisées lors du PIDR
- Création d'une classe à part qui réalise le travail qui était fait avant dans le Harvester (version avec objets)

*** Tue 16 Jun
**** DONE Résoudre le problème des codes Python qui font des erreurs d'interprétation (affiche "null" pour le moment)
      SCHEDULED: <2015-06-18 thu.>
**** DONE Finir les tests éventuels (clics rageurs, fonctionnement global)
      SCHEDULED: <2015-06-19 fri.>
**** DONE Finir l'intégration avec le code d'Hervé
      SCHEDULED: <2015-06-19 fri.>
**** DONE Etudier le cas des boucles infinies dans le code élève
      SCHEDULED: <2015-06-22 mon.>

- Correction de quelques bugs dans les ré-exécutions de codes élève
- Réimplémentation de la classe de statistiques (on oublie le csv pour l'instant, étant donné qu'il y a des virgules dans les logs d'erreur)

*** Wed 17 Jun
**** TODO Récupérer une nouvelle machine
      SCHEDULED: <2015-06-18 thu.>
**** DONE Rendre le code propre dans toutes les classes déjà écrites
      SCHEDULED: <2015-06-18 thu.>
**** DONE Problème sur les leçons traitant de la récursivité
      SCHEDULED: <2015-06-18 thu.>
**** DONE Etudier la rétrocompatibilité du programme (exercices qui ont changé de nom...)
      SCHEDULED: <2015-06-19 fri.>
      Est-ce que ça a vraiment un intérêt, étant donné que ce sont, pour la plupart d'entre eux, des exercices qui n'existent plus actuellement dans la PLM ?
      Pour l'instant, ça ne fonctionne pas vraiment.
**** DONE Réaliser des tests sur de grandes masses de données
      SCHEDULED: <2015-06-19 fri.>
      Pour cela, il faut une machine plus puissante et surveiller l'exécution du code pendant toute sa durée, quitte à relancer le code plusieurs fois.
      Le test a été effectué sur 150 branches pour un total de près de 6600 fichiers.

- Jabber fonctionne sur ma machine
- Exécution sur plus de branches que par le passé (environ 20 branches avant l'arrêt du programme, soit à cause de la mémoire, soit à cause du processeur)
- Résultats obtenus sur 100 branches
- On vérifie que si l'exécution est stoppée manuellement, c'est que l'élève a potentiellement réalisé une boucle infinie, et on en gère l'exécution
- Le code fonctionne, mais il peut parfois s'arrêter sans aucune bonne raison apparente
- Plusieurs tentatives pour réduire l'espace mémoire utilisé par le programme, sans succès

*** Thu 18 Jun
**** DONE Commenter le code
      SCHEDULED: <2015-06-22 mon.>

- Premiers tests de création d'un jar pour l'exécution à distance (ça fonctionne bien en console)
- Leçons sur la récursivité normalement toutes gérées
- Javadoc créée dans les classes qui concernent mon travail

*** Fri 19 Jun
**** DONE Lancer le programme sur toutes les branches
      SCHEDULED: <2015-06-22 mon.>
**** DONE Créer un jar
      SCHEDULED: <2015-06-19 fri.>
**** DONE  Gérer les boucles infinies
      SCHEDULED: <2015-06-22 mon.>

- Vérification approfondie des erreurs récupérées : certaines erreurs n'ont pas de consistance puisque l'exercice n'existe plus dans la PLM
- Refactoring du code terminé
- Fusion du code avec le code d'Hervé
- Jar prêt à être exécuté sous réserve de surveillance accrue
- /!\ Débug ultime du code qui peut maintenant s'exécuter sur n'importe quelle machine possédant au moins 2Go de RAM disponible pour Java et un processeur lambda (joue sur la vitesse de calcul)

** Week 22 Jun
*** Mon 22 Jun
**** DONE S'occuper de l'exécution des exercices sur la Moria
      SCHEDULED: <2015-06-22 mon.>
**** DONE Vérifier si les exercices à exécuter sont présents dans la liste des exercices encore implantés
      SCHEDULED: <2015-06-23 tue.>
**** DONE Créer un monde erreur
      SCHEDULED: <2015-06-22 mon.>
**** DONE Implanter le monde erreur et tester son exécution
      SCHEDULED: <2015-06-26 fri..>

- Correction de quelques bugs sur l'exécution des exercices qui ont changé de nom
- Etude de la PLM pour l'implantation des mondes erreurs

*** Tue 23 Jun

- Correction d'un bug dans le reparcours des branches
- Etude approfondie de la PLM

*** Wed 24 Jun

- Nouvelle recorrection dans le reparcours des traces
- Accueil des deux nouveaux stagiaires
- Première tentative d'ajout de mondes leurre

*** Thu 25 Jun
**** DONE Vérifier que les mondes leurre sont compilés
      SCHEDULED: <2015-06-29 mon.>
**** TODO Faire afficher le bon message à la PLM
      SCHEDULED: <2015-07-02 thu.>

- Premiers mondes leurre ajoutés (il faut encore que ça affiche le bon message dans la PLM, et là, c'est une autre paire de manche...)
- Plusieurs essais réalisés, mais je ne sais pas si les mondes leurres sont testés ou non

*** Fri 26 Jun
**** DONE Continuer de modifier les classes attenantes à l'ajout d'un test d'un monde leurre
     SCHEDULED: <2015-06-29 mon.>

- Les mondes leurre ne sont ni testés, ni compilés (il doit probablement y avoir quelque chose à faire avec getCompilableContent)
- Le code avance vers sa structure finale, il reste seulement à modifier quelques classes...

** Week 29 Jun
*** Mon 29 Jun
- Premier affichage du bon résultat mais problème au niveau de son obtention

*** Tue 30 Jun
**** TODO Utiliser la structure de Vector<Vector<World>> pour tester plusieurs résultats faux
      SCHEDULED: <2015-07-02 thu.>
**** TODO Trouver le moyen de changer le message qui s'affiche selon l'exercice lancé
      SCHEDULED: <2015-07-01 wed.>
**** TODO Réfléchir à la manière d'ajouter les mondes leurre dans la PLM
      SCHEDULED: <2015-07-03 fri.>

- Le code est committé dans mon repo forké de la PLM (http://www.github.com/Glasfeu/PLM)
- Il permet d'ajouter des mondes leurre en java, scala et python, mais affiche pour le moment la même erreur (voir TODO du 25 juin)
- Les trois langages suscités sont obligatoires pour qu'une erreur soit testée
